version: '0.0.{build}'
image: Visual Studio 2019

# Setup environment
nuget:
  disable_publish_on_pr: true

pull_requests:
  do_not_increment_build_number: true

branches:
  except:
    - /tmp|temp/

skip_commits:
  files:
  - .github/
  - .gitattributes
  - .gitignore
  - LICENSE
  - README.md
  - CONTRIBUTING.md
  - ISSUE_TEMPLATE.md
  - CODE_OF_CONDUCT.md
  - '**/*.DotSettings'

environment:
  SONARQUBE_TOKEN:
    secure: 2I3bluR+2upDl17M1Qmnil/eSAhUFcv4uaW5vvZOveWsFkYY773KQtLmK7H8dcLI
  DocFXVersion: 2.58
  NUnitConsoleVersion: 3.10.0
  OpenCoverVersion: 4.7.922
  CoverallsVersion: 1.0.0
  COVERALLS_REPO_TOKEN:
    secure: V9+BC6iS7KQL2KD+Wo2HrCYWP81uJqeAOH+SM6imJfwAGT4jmFO2K7LebXyZXTKy
  GITHUB_ACCESS_TOKEN:
    secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
  GITHUB_EMAIL:
    secure: wcfqCHOmeRLZf/BX6u6qQSV89Q4jFs9fHNDgMpKAcqE=

# Setup build version
install:
  - ps: ./build/setupBuild.ps1

# Assembly infos & csproj patching
assembly_info:
  patch: true
  file: '**\\AssemblyInfo.*'
  assembly_version: '$(Build_Assembly_Version)'
  assembly_file_version: '$(Build_Assembly_Version)'
  assembly_informational_version: '$(Build_Version)'

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '$(Build_Assembly_Version)'
  package_version: '$(Build_Version)'
  assembly_version: '$(Build_Assembly_Version)'
  file_version: '$(Build_Assembly_Version)'
  informational_version: '$(Build_Version)'

# Build configurations
platform:
  - Any CPU

configuration:
  - Debug
  - Release

matrix:
  fast_finish: true

# Build
before_build:
# NuGet restore
  - nuget restore -verbosity detailed
# SonarQube
  - ps: >-
      if ($env:IsFullIntegrationBuild -eq $true)
      {
          dotnet tool install --tool-path tools dotnet-sonarscanner
          $sonarScanner = (Resolve-Path "tools\dotnet-sonarscanner.exe").ToString()
      }

build:
  verbosity: minimal

build_script:
# Start SonarQube analysis (only for Release configuration)
  - ps: $analysisFile = (Convert-Path SonarQube.Analysis.xml).ToString()
  - ps: >-
      if ($env:IsFullIntegrationBuild -eq $true)
      {
          & $sonarScanner begin /k:"fastgraph" /s:$analysisFile /o:"brucificus-github" /d:sonar.host.url="https://sonarcloud.io" /d:"sonar.branch.name=$env:APPVEYOR_REPO_BRANCH" /d:sonar.cs.opencover.reportsPaths="coverage.xml" /d:sonar.login="$env:SONARQUBE_TOKEN"
      }
  - msbuild

before_test:
# NuGet packages for test & coverage
  - ps: >-
      nuget install NUnit.Console -Version $env:NUnitConsoleVersion -OutputDirectory tools
      
      if ($env:IsFullIntegrationBuild -eq $true)
      {
          nuget install OpenCover -Version $env:OpenCoverVersion -OutputDirectory tools
          dotnet tool install --tool-path tools --version $env:CoverallsVersion coveralls.net
      }

test_script:
# Test & generate coverage report
  - ps: >-
      $nunitFolder = (Resolve-Path "tools\NUnit.ConsoleRunner.*\tools").ToString();
      $nunitConsole = (Resolve-Path "$nunitFolder\nunit3-console.exe").ToString();
      
      # Only take test assemblies matching their folder name
      # Example:
      # Directory = tests\TestProject.Tests\bin\CONFIGURATION\TARGET
      # Directory.Parent = tests\TestProject.Tests\bin\CONFIGURATION
      # Directory.Parent.Parent = tests\TestProject.Tests\bin
      # Directory.Parent.Parent.Parent = tests\TestProject.Tests
      
      $testAssemblies = (ls tests\*.Tests\bin\$env:Configuration\net461\*Tests.dll | Where-Object { $_ -Match "net*" -and $_ -NotMatch "netcoreapp*" -and [System.IO.Path]::GetFileNameWithoutExtension($_.FullName) -Match $_.Directory.Parent.Parent.Parent.Name } | % FullName | sort-object -Unique);
      
      $testsPassed = $false;
      if ($env:IsFullIntegrationBuild -eq $true)
      {
          $opencover = (Resolve-Path "tools\OpenCover.*\tools\OpenCover.Console.exe").ToString();
          $coveralls = (Resolve-Path "tools\csmacnz.Coveralls.exe").ToString();
          
          & $opencover -register:Path64 -filter:"+[*]* -[*.Test*]* -[*]JetBrains.Annotations*" -excludebyfile:"*\Dgml.cs;*\SortedSet.cs;*\BitHelper.cs" -hideskipped:File -target:"$nunitConsole" -targetargs:"$testAssemblies --result=\`"TestResult.xml\`" --where \`"cat != VerboseTest and cat != CISkip\`"" -returntargetcode -log:Warn -output:coverage.xml;
          $testsPassed = $?;
          
          & $sonarScanner end /d:"sonar.login=$env:SONARQUBE_TOKEN"
          
          & $coveralls --opencover -i coverage.xml --repoToken $env:COVERALLS_REPO_TOKEN --useRelativePaths --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_BUILD_NUMBER --serviceName appveyor
      }
      else
      {
          & $nunitConsole $testAssemblies --where "cat != VerboseTest and cat != CISkip";
          $testsPassed = $?;
      }
      
      # Upload results to AppVeyor
      
      $wc = New-Object 'System.Net.WebClient';
      $wc.UploadFile("https://ci.appveyor.com/api/testresults/nunit3/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\TestResult.xml));
      
      if (!$testsPassed)
      {
          throw "Unit tests failed";
      }

# Artifacts
artifacts:
  - path: '**\bin\Release\*.nupkg'
    name: NuGet
  - path: '**\bin\Release\*.snupkg'
    name: NuGet symbols

# Documentation
before_deploy:
# Release documentation
  - ps: ./build/releaseDoc.ps1

# Deploy
deploy:
# MyGet
  - provider: NuGet
    server: https://www.myget.org/F/brucificus-ci/api/v2/package
    symbol_server: https://www.myget.org/F/brucificus-ci/symbols/api/v2/package
    api_key:
      secure: ANF+joC2B+NahxCFbLPOjNvEAo36F2F4QJu6zLwoIf2I9KwkxKyCSuNxDpLmJmtU
    on:
      configuration: Release
# GitHub packages
  - provider: NuGet
    server: https://nuget.pkg.github.com/brucificus/index.json
    username: brucificus
    api_key:
      secure: 6N37NtnuKSzKQXlPOCtPSFJGOvJUdJjPK8LcuWx2PjHs2WVdngenZvYixk6br72b
    skip_symbols: true
    artifact: NuGet
    on:
      configuration: Release
      APPVEYOR_REPO_TAG: true
# NuGet
  - provider: NuGet
    api_key:
      secure: zP8NG9npOCKDveAxWgK3a2Nb95gE5tk08i5ksxQKJpzqg0WsbOsK6vfxUjsjmlM+
    on:
      configuration: Release
      APPVEYOR_REPO_TAG: true
# GitHub
  - provider: GitHub
    auth_token:
      secure: fLTTmcGOM55kigJC4vErpObFmybCtzQtwb4QN55BTNq3GDGaOCoHDoIPxexzO59d
    release: '${APPVEYOR_REPO_TAG_NAME}'
    description: 'Version ${Release_Name}'
    draft: false
    prerelease: false
    force_update: true
    on:
      configuration: Release
      APPVEYOR_REPO_TAG: true